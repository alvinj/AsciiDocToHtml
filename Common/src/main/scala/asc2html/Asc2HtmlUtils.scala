package asc2html

import org.jsoup.safety.Whitelist

object Asc2HtmlUtils {

    def configureWhitelistTagsToKeep(whitelist: Whitelist): Unit = {
        // tags to keep (whitelist). notably i don’t want
        // `div` or `span` tags generated by asciidoctor.
        // i also exclude `html`, `head`, and `body` for
        // my blogging needs.
        whitelist.addTags(
            "p", "code", "pre",
            "h1", "h2", "h3", "h4", "h5", "h6",
            "ul", "ol", "li", "hr",
            "em", "strong", "b", "a", "i", "tt", "u",
            "table", "tr", "td", "th", "tbody", "thead", "tfoot",
            "dd", "dl", "dt", "figure", "img",
            "strike", "sup", "sub",
            "blockquote"
        )
    }

    def configureWhitelistAttributes(whitelist: Whitelist): Unit = {
        whitelist.addAttributes("code", "class", "data-lang")
        whitelist.addAttributes("img", "src")
        whitelist.addAttributes("a",  "href", "rel")
        // these are definitely optional
        whitelist.addAttributes("h1", "id")
        whitelist.addAttributes("h2", "id")
        whitelist.addAttributes("h3", "id")
        whitelist.addAttributes("h4", "id")
        whitelist.addAttributes("h5", "id")
        whitelist.addAttributes("h6", "id")
    }

    def showUsage: Unit = {
        import System.err.{println => errPrintln}
        errPrintln("")
        errPrintln("This script expects one command-line argument, the name")
        errPrintln("of the AsciiDoc input file that you want to convert to")
        errPrintln("HTML. The HTML results are written to STDOUT, so you’ll want")
        errPrintln("to do something like this:")
        errPrintln("")
        errPrintln("   scala asc3html.jar file.adoc > file.html")
        errPrintln("")
    }

    def insertBlankLinesBeforeHtmlTags(originalHtml: String): String = {
        val htmlAsSeq = convertStringWithNewlinesToSeq(originalHtml)
        val spacedHtmlAsSeq: Seq[String] = for {
            line <- htmlAsSeq
            newLine = if (line.startsWith("<h")) {
                s"\n\n${line}"  //two blank lines before header tags
            } else if (line.startsWith("<")) {
                s"\n${line}"    //one blank line before other html tags
            } else {
                line
            }
        } yield newLine
        val htmlWithBlankLines = spacedHtmlAsSeq.mkString("\n")
        htmlWithBlankLines
    }

    def convertStringWithNewlinesToSeq(s: String): Seq[String] =
        s.split("\n").toVector

}
